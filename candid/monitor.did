type CanisterCycles = record {
  name : text;
  canister_id : principal;
  cycles : nat;
};
type CanisterMemorySize = record {
  name : text;
  size : nat;
  canister_id : principal;
};
type CycleHistory = record { timestamps : vec nat64; line_data : vec LineData };
type EventInfo = record { owner : principal; attendance_milestone : nat64 };
type GroupInfo = record {
  activity_milestone : nat64;
  owner : principal;
  count_milestone : nat64;
};
type LineData = record { cycles : vec float64; canister_name : text };
type Log = record { msg : text; timestamp : nat64 };
type Logger = record {
  "principal" : opt principal;
  source : opt text;
  data : opt text;
  description : text;
  created_on : nat64;
};
type RewardableActivity = record {
  id : nat64;
  timestamp : nat64;
  activity : text;
};
service : {
  canister_cycle_history : (nat64) -> (CycleHistory) query;
  event_info : () -> (vec EventInfo);
  get_latest_logs : (nat64) -> (vec Log) query;
  get_latest_with_timestamp : (nat64) -> (vec text) query;
  graph_event_attendee_rewards : () -> (vec record { nat64; nat64 });
  graph_member_activity_rewards : () -> (vec record { nat64; nat64 });
  graph_member_count_rewards : () -> (vec record { nat64; nat64 });
  group_info : () -> (vec GroupInfo);
  icp_balance : () -> (text) query;
  initiate_run : () -> ();
  latest_icp_balances : (nat64) -> (vec record { nat64; float64 }) query;
  latest_proxy_logs : (nat64) -> (vec Logger);
  proxy_log_size : () -> (nat64);
  proxy_store_stats : () -> (vec text);
  read_reward_buffer : () -> (vec RewardableActivity);
  reward_timer_next_trigger : () -> (opt nat64);
  sorted_canister_cycles : () -> (vec CanisterCycles) query;
  sorted_memory_sizes : () -> (vec CanisterMemorySize) query;
  store_stats : () -> (vec text) query;
  timer_set : () -> (bool) query;
  token_balances : () -> (vec record { principal; nat64 });
  token_log_size : () -> (nat64);
}